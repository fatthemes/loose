# Shippable CI (MIT License) configuration file for the Underscores WordPress theme.
# @link https://app.shippable.com/

# For use with the Fattheme's WordPress themes.
# @link

#shippable/docker image cache enabled
#cache: true

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

build_image: limestreet/test-image

# Declare versions of PHP to use. Use one decimal max.
php:
  # aliased to a recent 5.5.x version
  - "7.0"
  # aliased to a recent 5.4.x version
  #- "5.4"

# Declare which versions of WordPress to test against.
# Also declare whether or not to test in Multisite.
env:
  #- BASE_BRANCH=beta
  # Trunk
  # @link https://github.com/WordPress/WordPress
  - WP_VERSION=master WP_MULTISITE=0
  #- WP_VERSION=master WP_MULTISITE=1
  # WordPress 4.2
  # @link https://github.com/WordPress/WordPress/tree/4.2-branch
  #- WP_VERSION=4.2 WP_MULTISITE=0
  #- WP_VERSION=4.1 WP_MULTISITE=1

# @link https://buddypress.trac.wordpress.org/ticket/5620
# @link http://docs.travis-ci.com/user/build-configuration/
#matrix:
  #include:
    #- php: 5.6
    #- php: 7.0
    #- php: 7.1
      #env: WP_VERSION=master
      #env: WP_VERSION=4.4
  #allow_failures:
    #- php: 7.1
  #fast_finish: true

#branches:
  #only:
    #- beta

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
before_install:
  - echo $BRANCH
  - echo $BUILD_NUMBER
  - echo $BASE_BRANCH
  - echo $COMMIT
  - echo $PATH
  - echo $REPO_NAME
  - echo $PULL_REQUEST
  - echo "127.0.1.1  wp.test" >> /etc/hosts
  - cat /etc/hosts
  - export WP_DEVELOP_DIR=/tmp/wordpress/
  #install nginx
  #- sudo apt-get update
  #- apt-get install -y php-xml
  #- sudo apt-get install mysql
  #- sudo apt-get install nginx
  #- sudo cp ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf.default ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf
  #- ~/.phpenv/versions/$(phpenv version-name)/sbin/php-fpm
  #- pa11y --ignore "warning;notice" http://localhost:8080
  - touch site-nginx.conf
  - echo "server {
    server_name wp.test;
    listen 80;
    root $WP_DEVELOP_DIR/src;
    index index.php;
    location / {
        try_files \$uri \$uri/ /index.php?\$args;
        }
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php7.0-fpm.sock;
        }
    }" > site-nginx.conf
  - cp -f site-nginx.conf /etc/nginx/sites-enabled/site-nginx.conf
  - rm -f site-nginx.conf
  - cat /etc/nginx/sites-enabled/site-nginx.conf
  #- echo "cgi.fix_pathinfo=0" >> /etc/php/7.0/fpm/php.ini
  #- sed -i "s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/" /etc/php/7.0/fpm/php.ini
  #- sed -e "s?%$WP_DEVELOP_DIR%?$(pwd)?g" --in-place /etc/nginx/sites-enabled/site-nginx.conf
  #- sed -i "s/nodaemon=true/;nodaemon=true/" /etc/supervisor/supervisord.conf
  - sed -i "s/daemon off;/#daemon off;/" /etc/nginx/nginx.conf
  #- /usr/bin/start.sh
  # start nginx and php7-fpm
  - service nginx start
  - service php7.0-fpm start
  # start mysql
  - service mysql start
  - service mysql status
  - service php7.0-fpm status
  - service nginx status
  # install jshint
  #- npm update
  #- npm install
  #- npm install -g grunt-cli
  #- npm install -g jshint
  #- npm install -g pa11y
  #- npm install -g casperjs
  # init phpbrew
  - phpbrew init
  - source ~/.phpbrew/bashrc
  - phpbrew list
  # update wp-cli
  - echo $WP_VERSION
  - if [[ $WP_VERSION = master ]]; then wp cli update --nightly --yes --allow-root;fi
  #- if [[ $WP_VERSION != master ]]; then wp cli update --yes --allow-root;fi


#addons:
  #hosts:
    #- wp.dev

  #firefox: "27.0"

#services:
  #- selenium

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  #- mkdir -p shippable/codecoverage
  #- mkdir -p shippable/testresults
  # Prepare for using Selenium
  #- "export DISPLAY=:99.0"
  #- "/etc/init.d/xvfb start"
  # Set up WordPress installation.
  #- export WP_DEVELOP_DIR=/tmp/wordpress/
  - mkdir -p $WP_DEVELOP_DIR
  # Use the Git mirror of WordPress.
  - git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
  # Set up theme information.
  - theme_slug=$(basename $(pwd))
  - theme_dir=$WP_DEVELOP_DIR/src/wp-content/themes/$theme_slug
  - cd ..
  - mv $theme_slug $theme_dir
  # Set up WordPress configuration.
  - cd $WP_DEVELOP_DIR
  #- echo $WP_DEVELOP_DIR
  - cp wp-tests-config-sample.php wp-tests-config.php
  - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
  - sed -i "s/yourusernamehere/root/" wp-tests-config.php
  - sed -i "s/yourpasswordhere//" wp-tests-config.php
  # Create WordPress database.
  - mysql -e 'CREATE DATABASE wordpress_test;' -uroot
  #Install WP-CLI
  #- curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
  #- php wp-cli.phar --info
  #- chmod +x wp-cli.phar
  #- sudo mv wp-cli.phar /usr/local/bin/wp
  #- wp --info
  #create config file
  - wp core config --dbname=wordpress_test --dbuser=root --allow-root
  #install wp
  - wp core install --url=wp.test --title="Local WordPress" --admin_name=admin --admin_email="admin@local.dev" --admin_password="password" --allow-root
  - wp theme activate $theme_slug --allow-root
  #- wp plugin install wordpress-importer --activate --allow-root
  #- curl -Ok https://wpcom-themes.svn.automattic.com/demo/theme-unit-test-data.xml
  #- ls $WP_DEVELOP_DIR
  #- wp import $WP_DEVELOP_DIR/theme-unit-test-data.xml --authors=create --allow-root
  #Install and activate vip-scanner plugin
  #- git clone --recursive  https://github.com/Automattic/vip-scanner.git $WP_DEVELOP_DIR/src/wp-content/plugins/vip-scanner
  #- wp plugin activate vip-scanner
  # Install CodeSniffer for WordPress Coding Standards checks.
  - git clone https://github.com/squizlabs/PHP_CodeSniffer.git php-codesniffer
  # Install WordPress Coding Standards.
  - git clone https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git wordpress-coding-standards
  # Install PHP Compatibility sniffs.
  - git clone -b master --depth 1 https://github.com/wimg/PHPCompatibility.git wordpress-coding-standards/PHPCompatibility
  # Hop into CodeSniffer directory.
  - cd php-codesniffer
  # Set install path for WordPress Coding Standards.
  # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
  - scripts/phpcs --config-set installed_paths ../wordpress-coding-standards
  # Hop into themes directory.
  - cd $theme_dir
  # run npm install
  #- npm install
  #- npm install -g jshint
  # Run some grunt build tasks
  #- grunt
  # check which php version is used
  #- php -v

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  # Check with vip-scanner (only informational)
  #- wp vip-scanner scan-theme --theme=$theme_slug --scan_type="Undefined Function Check"
  # Search for PHP syntax errors.
  # default ubuntu php version
  - find . \( -name '*.php' -not -path "*node_modules*" -not -path "*vendor*" \) -print0 | xargs -0 -n1 php -lf
  # oldest available php version
  - phpbrew use php-5.2.17
  #- phpbrew use php-5.3.29
  - php -v
  - find . \( -name '*.php' -not -path "*node_modules*" -not -path "*vendor*" \) -print0 | xargs -0 -n1 php -lf
  # newest php version
  #- phpbrew use php-7.0.1
  #- php -v
  #- find . \( -name '*.php' -not -path "*node_modules*" -not -path "*vendor*" \) -print0 | xargs -0 -n1 php -lf
  - phpbrew off
  - php -v
  # Checking with jshint
  #- grunt jshint
  - jshint .
  # Checking with pa11y
  #- pa11y google.com
  # WordPress Coding Standards
  # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
  # @link http://pear.php.net/package/PHP_CodeSniffer/
  # -p flag: Show progress of the run.
  # -s flag: Show sniff codes in all reports.
  # -v flag: Print verbose output.
  # -n flag: Do not print warnings. (shortcut for --warning-severity=0)
  # --standard: Use WordPress as the standard.
  # --extensions: Only sniff PHP files.
  - $WP_DEVELOP_DIR/php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./phpcs.ruleset.xml --extensions=php --ignore=*/node_modules/*,*/vendor/*,class-tgm-plugin-activation.php,class-media-grabber.php --runtime-set testVersion 5.2-7.0
  - curl http://wp.test
  # Testing with casperjs
  - ls
  - casperjs --version
  - phantomjs -v
  - casperjs test casper-tests.js
  # Checking with linkchecker + html-tidy
  #- linkchecker -r 1 --ignore-url=feed --ignore-url=rss --ignore-url=xmlrpc http://wp.dev/?s=page

#after_script:

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
  email: false

after_success:
  - echo $BRANCH
  - if [[ $BRANCH != beta && $BRANCH != stable ]]; then git checkout beta;fi
  - if [[ $BRANCH != beta && $BRANCH != stable ]]; then git reset --hard;fi
  - if [[ $BRANCH != beta && $BRANCH != stable ]]; then git clean -f;fi
  - if [[ $BRANCH != beta && $BRANCH != stable ]]; then git merge $BRANCH;fi
  - if [[ $BRANCH != beta && $BRANCH != stable ]]; then git push origin beta;fi
  - if [[ $BRANCH != beta && $BRANCH != stable ]]; then git push origin :$BRANCH;fi
